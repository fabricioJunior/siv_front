// Mocks generated by Mockito 5.4.5 from annotations
// in empresas/test/doubles/use_cases.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:empresas/domain/data/repositories/i_empresas_repository.dart'
    as _i2;
import 'package:empresas/domain/entities/empresa.dart' as _i3;
import 'package:empresas/domain/usecases/criar_empresa.dart' as _i7;
import 'package:empresas/domain/usecases/recuperar_empresa.dart' as _i6;
import 'package:empresas/domain/usecases/recuperar_empresas.dart' as _i4;
import 'package:empresas/domain/usecases/salvar_empresa.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIEmpresasRepository_0 extends _i1.SmartFake
    implements _i2.IEmpresasRepository {
  _FakeIEmpresasRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEmpresa_1 extends _i1.SmartFake implements _i3.Empresa {
  _FakeEmpresa_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [RecuperarEmpresas].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecuperarEmpresas extends _i1.Mock implements _i4.RecuperarEmpresas {
  MockRecuperarEmpresas() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i3.Empresa>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i5.Future<List<_i3.Empresa>>.value(<_i3.Empresa>[]),
          )
          as _i5.Future<List<_i3.Empresa>>);
}

/// A class which mocks [RecuperarEmpresa].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecuperarEmpresa extends _i1.Mock implements _i6.RecuperarEmpresa {
  MockRecuperarEmpresa() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IEmpresasRepository get empresasRepository =>
      (super.noSuchMethod(
            Invocation.getter(#empresasRepository),
            returnValue: _FakeIEmpresasRepository_0(
              this,
              Invocation.getter(#empresasRepository),
            ),
          )
          as _i2.IEmpresasRepository);

  @override
  _i5.Future<_i3.Empresa?> call(int? idEmpresa) =>
      (super.noSuchMethod(
            Invocation.method(#call, [idEmpresa]),
            returnValue: _i5.Future<_i3.Empresa?>.value(),
          )
          as _i5.Future<_i3.Empresa?>);
}

/// A class which mocks [CriarEmpresa].
///
/// See the documentation for Mockito's code generation for more information.
class MockCriarEmpresa extends _i1.Mock implements _i7.CriarEmpresa {
  MockCriarEmpresa() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Empresa> call({
    required String? cnpj,
    required String? codigoDeAtividade,
    required String? codigoDeNaturezaJuridica,
    required String? email,
    required String? inscricaoEstadual,
    required String? nome,
    required String? nomeFantasia,
    required _i3.TipoRegimeEmpresa? regime,
    required String? registroMunicipal,
    required _i3.TipoDeSubstituicaoTributaria? substituicaoTributaria,
    required String? telefone,
    required String? uf,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #cnpj: cnpj,
              #codigoDeAtividade: codigoDeAtividade,
              #codigoDeNaturezaJuridica: codigoDeNaturezaJuridica,
              #email: email,
              #inscricaoEstadual: inscricaoEstadual,
              #nome: nome,
              #nomeFantasia: nomeFantasia,
              #regime: regime,
              #registroMunicipal: registroMunicipal,
              #substituicaoTributaria: substituicaoTributaria,
              #telefone: telefone,
              #uf: uf,
            }),
            returnValue: _i5.Future<_i3.Empresa>.value(
              _FakeEmpresa_1(
                this,
                Invocation.method(#call, [], {
                  #cnpj: cnpj,
                  #codigoDeAtividade: codigoDeAtividade,
                  #codigoDeNaturezaJuridica: codigoDeNaturezaJuridica,
                  #email: email,
                  #inscricaoEstadual: inscricaoEstadual,
                  #nome: nome,
                  #nomeFantasia: nomeFantasia,
                  #regime: regime,
                  #registroMunicipal: registroMunicipal,
                  #substituicaoTributaria: substituicaoTributaria,
                  #telefone: telefone,
                  #uf: uf,
                }),
              ),
            ),
          )
          as _i5.Future<_i3.Empresa>);
}

/// A class which mocks [SalvarEmpresa].
///
/// See the documentation for Mockito's code generation for more information.
class MockSalvarEmpresa extends _i1.Mock implements _i8.SalvarEmpresa {
  MockSalvarEmpresa() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Empresa> call({required _i3.Empresa? empresa}) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {#empresa: empresa}),
            returnValue: _i5.Future<_i3.Empresa>.value(
              _FakeEmpresa_1(
                this,
                Invocation.method(#call, [], {#empresa: empresa}),
              ),
            ),
          )
          as _i5.Future<_i3.Empresa>);
}
